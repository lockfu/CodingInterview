public class Q7 {
	/**
	 * 判读一个链表是否为回文链表
	 */
	
	public static boolean isPalindrom(Node node){
		if(node == null || node.next == null)
			return true;
		Node tmp = node;
		Node revs = reverse(tmp);
		while(revs!=null && node != null){
			if(revs.data != node.data)
				return false;
			revs = revs.next;
			node = node.next;
		}
		return true;
	}
	

	/**
	 * 使用迭代的来判读是否为回文 
	 *  使用快慢指针， 将前半部分的数存入到堆栈中， 然后进行判断
	 * @param node
	 * @return
	 */
	public static boolean isPalindrom1(Node node){
		if(node == null || node.next == null)
			return true;
		Node fast = node, slow = node;
		Stack<Integer> st = new Stack<>();
		while(fast != null && fast.next != null){
			st.push(slow.data);
			slow = slow.next;
			fast = fast.next.next;
		}
		if(fast != null) slow = slow.next;
		
		while(slow != null){
			int tmp = st.pop().intValue();
			if(tmp != slow.data) 
				return false;
			slow = slow.next;
		}
		return true;
	}
	
	/**
	 * 反转链表
	 * @param node
	 * @return
	 */
	public static Node reverse(Node node){
		if(node == null || node.next == node)
			return node;
		Node head = null;
		while(node != null){
			Node cur = new Node(node.data);
			cur.next = head;
			head = cur;
			node = node.next;
		}
		return head;
	}
}

