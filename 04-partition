/**
	 * 以给定值x为基准， 将小于x的节点排在大于等于x的节点之前 放回正确的链表 
	 *
	 */
	public static Node partition(Node head, int x){
		Node smallStart = null;
		Node smallEnd  = smallStart;
		Node largeStart  = null;
		Node largeEnd  = largeStart;
		while(head != null){
			if(head.data < x){
				smallStart = new Node(head.data);   // 每个节点新建对象
				smallStart = smallStart.next;
			}else{
				largeStart = new Node(head.data);
				largeStart = largeStart.next;
			}
			head = head.next;
		}
		if(smallEnd == null)
			return largeEnd;
		smallStart.next = largeEnd;
		return smallEnd;
	}
	
	public static Node partition1(Node head, int x){
		Node smallStart = null;
		Node smallEnd  = null;
		Node largeStart  = null;
		Node largeEnd  = null;
		while(head != null){
			Node next = head.next;
			head.next = null;
			if(head.data < x){
				if(smallStart == null){   // 不需要新建对象
					smallStart = head;
					smallEnd = smallStart;
				}else{
					smallEnd.next = head;
					smallEnd = head;
				}
			}else{
				if(largeStart == null){
					largeStart = head;
					largeEnd = largeStart;
				}else{
					largeEnd.next = head;
					largeEnd = head;
				}
			}
			head = next;
		}
		if(smallStart == null)
			return largeStart;
		smallEnd.next = largeStart;
		return smallStart;
	}
	
	
	/**
	 * 只维护两个变量  
	 * @param head
	 * @param x
	 * @return
	 */
	public static Node partition2(Node head, int x){
		Node smallStart = null;
		Node largeStart  = null;
		while(head != null){
			Node next = head.next;
			if(head.data < x){         // 将节点插入到链表的前端 同时重置链表到前端。
				head.next = smallStart;  
				smallStart = head;
			}else{
				head.next = largeStart;
				largeStart = head;
			}
			head = next;
		}
		if(smallStart == null)
			return largeStart;
		Node tmp = smallStart;
		while(smallStart != null){
			smallStart = smallStart.next;
		}
		smallStart.next = largeStart;
		return tmp;
	}
